{
  "type": "service_account",
  "project_id": "gymworkdidsclosedoauth",
  "private_key_id": "b7e94828d2b93de6332d8b47aec03459faf10efe",
  "encrypted_private_key": "ENCRYPTED_PRIVATE_KEY"
}
const crypto = require('crypto');

// Encrypt the private key
const privateKey = `-----BEGIN PRIVATE KEY-----
MIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQDVYcOmOIztK+vy
+x0RyC5KncUOKEhWOCr57z8Zyt6DVE8TJPbzbvuPBDR/BUfddh3Rl0hSX6eCWQqK
7B+hGXkpoqhEClmvCvE+N+vlimOKPKDqAITtOd7nCInBEaTBKByXi5cvcpVNJnNn
5OKG1xqqnE/ipPvHqIA29THe1OO17YeHdyHI0TWu25uKelI3/A7ErcxLFiPXoWzP
tFGpbnE7u6PrD1BKMYlY8yjWqoPLH4Wrk8BVMsIJX93u8qsdA4hcMlQrpHLW/HxW
/dDsDjEvT8MgNh9nOng4V05s+Qy+VJXOzdrFMjp8phx+NlUzH/PN0fRYlxGbGLbr
fsDIC5pTAgMBAAECggEAMe3hYPikiS6Y1E9L+wgzRMRsAqcMXhhgfgEsa7WboXFN
23XvzwBuHoXmXr52lWx5B7z1cEjvokGBhQZBVGnofwSPiPQ/DgVqc5uUOC7MoeET
6g1bDUNYVAkcaq/dNFFVd2RzaOfP5bCUmn/lPZYBqGBRFQBz5cEY10NCexine779
/fNQX8azeSBtehI8OtOgq9ukVIKoGDD0EMyebL8i4gBI+Aq+3EmdUBuyl2yJSytw
4iZ+sYkqL57gyf9c6ylr8Bh0WDErtiVTBXorDeSxUorx0iNOQxMZuJhUygNc/sgH
F38L6GwrUfcy/bfVFw2fFzVesZs/Lpz3wNoAWK9m4QKBgQD/8w8wHRngBPGaBbjS
1DZsgpqjZ3wDv1q0Ns46NE8+uO16RSx8Gj15qHsVzQFnCPWSPERpyc1kYcYbC+d5
zX68gTAjjFjHG2bqKN9k/cZ/iAPwaTraC6L3mNRDY/2uUfB305kW3x7gU/rCxXEB
fxH4jF7iD1828WyYE7L9ecYSEQKBgQDVbI1/7yQsndANuupb7lVPMrpcsABqRKGI
AXDdH4Xv948pIAGY4+euXm9y27vUsjE6gd39UMC8YQ0osB/+mkjlrBeiWLjd6L2R
EKJk6xiDeXNQjTHaZN4WXzTTeOUVGgX3SvvQ2GbtAyZNItAhjpTumsVBvzpYVhm5
4bMRxaMCIwKBgQDJGgvz7NmYx6mhMB/BH1ZHufKQs02gkChPcsRkvRcKnDiTGmjS
dbeZsERNo88XStXQeaPzTskftyb1t0u/yzNqH0NYmvxiLOiW0Vh9PFxLde5KZhQE
oKICUsVs0dLPtbfwHoSpkNPsxG9Bu+qHl3TiSkB+9D8Gp3iAoPHA8X4sUQKBgQCL
1FVY7ptqx/KaLE6D8MDf5MKJG58KAPE8JIWHurGMKUwYi6nAPAF9Es4+GI0Vq7Hp
PVDuOMwuH//5Gnu72eXM5FWPvkVQzr30n0tmh0lGSnos2nVBOzjuu23m55xfmO8z
uGMHz+CPhLLBcv+eHMajFbALhXh6i97LFH64NB66tQKBgQD4hbHBFPeXNU4c/jyI
WGuKXaMyqubxL3b+IshxlJ9ASO5P3e+ENP/NEPfe8nYQBbdOreeIWfZ5sMVBs+2f
T64J7uN4Yu4MFJTDkYtewTyUNmxhGjLtbQxKZ9Z53Hfk1votJkbeAtpc9w1B/7sk
+0OVDTbaOqnPaseLtiTMXlyYyQ==
-----END PRIVATE KEY-----`;

const encryptionKey = crypto.randomBytes(32); // Generate a random encryption key

const cipher = crypto.createCipher('aes-256-cbc', encryptionKey);
let encryptedPrivateKey = cipher.update(privateKey, 'utf8', 'hex');
encryptedPrivateKey += cipher.final('hex');

// Store the encrypted private key securely (e.g., in a secret vault or database)
const storedEncryptedPrivateKey = encryptedPrivateKey;

// Store the encryption key securely (e.g., in a separate secret vault or key management service)
const storedEncryptionKey = encryptionKey.toString('hex');

// Retrieve the encrypted private key and encryption key from storage

// Decrypt the private key
const decipher = crypto.createDecipher('aes-256-cbc', Buffer.from(storedEncryptionKey, 'hex'));
let decryptedPrivateKey = decipher.update(storedEncryptedPrivateKey, 'hex', 'utf8');
decryptedPrivateKey += decipher.final('utf8');

console.log(decryptedPrivateKey);
  "client_email": "firebase-adminsdk-x2pqe@gymworkdidsclosedoauth.iam.gserviceaccount.com",
  "client_id": "107278505986797489591",
  "auth_uri": "https://accounts.google.com/o/oauth2/auth",
  "token_uri": "https://oauth2.googleapis.com/token",
  "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
  "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/firebase-adminsdk-x2pqe%40gymworkdidsclosedoauth.iam.gserviceaccount.com",
  "universe_domain": "googleapis.com"
}
